                                                                            SDE Sheet Solutions
                                                                              (375 Questions)

5] Chocolate Distribution Problem 

Given an array A[ ] of positive integers of size N, where each value represents the number of chocolates in a packet. Each packet can have a variable number of chocolates. There are M students, the task is to distribute chocolate packets among M students such that :
1. Each student gets exactly one packet.
2. The difference between maximum number of chocolates given to a student and minimum number of chocolates given to a student is minimum.

Example 1:

Input:
N = 8, M = 5
A = {3, 4, 1, 9, 56, 7, 9, 12}
Output: 6
Explanation: The minimum difference between 
maximum chocolates and minimum chocolates 
is 9 - 3 = 6 by choosing following M packets :
{3, 4, 9, 7, 9}.

Solution:- 

class Solution
{
    public long findMinDiff (ArrayList<Integer> a, int n, int m)
    {
        // your code here
        Collections.sort(a);
        int mindiff = Integer.MAX_VALUE;
        int currdiff =0;
        
        for(int i=0;i<=n-m;i++) {
            currdiff=a.get(i+m-1)-a.get(i);
            if(mindiff>currdiff) {
                mindiff = currdiff;
            }
        }
        return mindiff;
    }

======================================================================================================================

4] Contains Duplicate

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

 

Example 1:

Input: nums = [1,2,3,1]
Output: true
Example 2:

Input: nums = [1,2,3,4]
Output: false


Solution:- 

class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums);
        for(int i=0;i<nums.length-1;i++) {
            if(nums[i]==nums[i+1]) {
                return true;
            }
        }
        return false;
    }
}

======================================================================================================================

3] Maximum-Subarray (Kadane Algorithm)

Given an array Arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum.


Example 1:

Input:
N = 5
Arr[] = {1,2,3,-2,5}
Output:
9
Explanation:
Max subarray sum is 9
of elements (1, 2, 3, -2, 5) which 
is a contiguous subarray.

Solution:-

class Solution{

    // arr: input array
    // n: size of array
    //Function to find the sum of contiguous subarray with maximum sum.
    long maxSubarraySum(int arr[], int n){
        long currsum = arr[0];
        long maxsum = arr[0];
        
        for(int i=1;i<arr.length;i++) {
            if(currsum<0) {
                currsum = 0;
            }
            currsum = currsum + arr[i];
            if(maxsum<currsum) {
                maxsum = currsum;
            }
            
        }
        return maxsum;
    }
}

======================================================================================================================

2] Reverse the Array

You are given a string s. You need to reverse the string.

Example 1:

Input:
s = Geeks
Output: skeeG

Solution:- 

class Reverse
{
    // Complete the function
    // str: input string
    public static String reverseWord(String str)
    {
        // Reverse the string str
        char a[] = str.toCharArray();
        int start = 0;
        int end = a.length-1;
        
        for(start = 0;start<end;start++) {
            char mid = a[start];
            a[start] = a[end];
            a[end] = mid;
            end--;
        }
        
        return String.valueOf(a);
    }
}

======================================================================================================================

1] Maximum and Minimum Element in an Array
  
  Given an array A of size N of integers. Your task is to find the sum of minimum and maximum elements in the array.
    Example 1:

    Input:
    N = 5
    A[] = {-2, 1, -4, 5, 3}
    Output: 1
    Explanation: min = -4, max =  5. Sum = -4 + 5 = 1

Solution:- 

  class Solution
  { 
    public static int findSum(int A[],int N) 
    {
        int max = A[0];
        int min = A[0];
        for(int i=1;i<A.length;i++) {
            if(min>A[i]) {
                min = A[i];
            }
            if(max<A[i]) {
                max = A[i];
            }
        }
        
        return min+max;
    }
  }
